//Code generated by solts. DO NOT EDIT.
import { Address, CancelStreamSignal, ContractCodec, Event, Keccak } from '../../index';
interface Provider {
  deploy(
    data: string | Uint8Array,
    contractMeta?: {
      abi: string;
      codeHash: Uint8Array;
    }[],
  ): Promise<Address>;
  call(data: string | Uint8Array, address: string): Promise<Uint8Array | undefined>;
  callSim(data: string | Uint8Array, address: string): Promise<Uint8Array | undefined>;
  listen(
    signatures: string[],
    address: string,
    callback: (err?: Error, event?: Event) => CancelStreamSignal | void,
    start?: 'first' | 'latest' | 'stream' | number,
    end?: 'first' | 'latest' | 'stream' | number,
  ): unknown;
  contractCodec(contractABI: string): ContractCodec;
}
export type Caller = typeof defaultCall;
export async function defaultCall<Output>(
  client: Provider,
  addr: string,
  data: Uint8Array,
  isSim: boolean,
  callback: (returnData: Uint8Array | undefined) => Output,
): Promise<Output> {
  const returnData = await (isSim ? client.callSim(data, addr) : client.call(data, addr));
  return callback(returnData);
}
export namespace NegationLib {
  export const contractName = 'NegationLib';
  export const abi =
    '[{"constant":true,"inputs":[{"internalType":"int256","name":"a","type":"int256"}],"name":"negate","outputs":[{"internalType":"int256","name":"inverse","type":"int256"}],"payable":false,"stateMutability":"pure","type":"function"}]';
  export const bytecode =
    '60b9610025600b82828239805160001a60731461001857fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c806325b832d9146038575b600080fd5b606160048036036020811015604c57600080fd5b81019080803590602001909291905050506077565b6040518082815260200191505060405180910390f35b600081600003905091905056fea265627a7a7231582025f0a2f322c335616644c87b35a42bad6fad892fda8312ab90121566f216478c64736f6c63430005110032';
  export const deployedBytecode =
    '730000000000000000000000000000000000000000301460806040526004361060335760003560e01c806325b832d9146038575b600080fd5b606160048036036020811015604c57600080fd5b81019080803590602001909291905050506077565b6040518082815260200191505060405180910390f35b600081600003905091905056fea265627a7a7231582025f0a2f322c335616644c87b35a42bad6fad892fda8312ab90121566f216478c64736f6c63430005110032';
  export function deploy({
    client,
    withContractMeta,
  }: {
    client: Provider;
    withContractMeta?: boolean;
  }): Promise<string> {
    const codec = client.contractCodec(abi);
    const data = Buffer.concat([Buffer.from(bytecode, 'hex'), codec.encodeDeploy()]);
    return client.deploy(
      data,
      withContractMeta
        ? [
            {
              abi: NegationLib.abi,
              codeHash: new Keccak(256).update(NegationLib.deployedBytecode, 'hex').digest('binary'),
            },
          ]
        : undefined,
    );
  }
  export async function deployContract(deps: { client: Provider; withContractMeta?: boolean }): Promise<Contract> {
    const address = await deploy(deps);
    return contract(deps.client, address);
  }
  export type Contract = ReturnType<typeof contract>;
  export const contract = (client: Provider, address: string) =>
    ({
      name: 'NegationLib',
      address,
      functions: {
        negate(
          a: number,
          call = defaultCall,
        ): Promise<{
          inverse: number;
        }> {
          const data = encode(client).negate(a);
          return call<{
            inverse: number;
          }>(client, address, data, true, (data: Uint8Array | undefined) => {
            return decode(client, data).negate();
          });
        },
      } as const,
    } as const);
  export const encode = (client: Provider) => {
    const codec = client.contractCodec(abi);
    return {
      negate: (a: number) => {
        return codec.encodeFunctionData('25B832D9', a);
      },
    };
  };
  export const decode = (client: Provider, data: Uint8Array | undefined, topics: Uint8Array[] = []) => {
    const codec = client.contractCodec(abi);
    return {
      negate: (): {
        inverse: number;
      } => {
        const [inverse] = codec.decodeFunctionResult('25B832D9', data);
        return { inverse: inverse };
      },
    };
  };
}
