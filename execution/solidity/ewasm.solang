interface E {
	function get_vm() external returns (string memory);
	function get_number() external returns (int);
}

event L (
	int indexed f1,
	string f2,
	bool f3
);

contract ewasm is E {
	function get_vm() public override pure returns (string memory) {
		return "ewasm";
	}

	function get_number() public pure override returns (int) {
		return 54321;
	}

	function call_get_vm(E e) public returns (string memory) {
		// solc can't do this
		return "ewasm called " + e.get_vm();
	}

	function call_get_number(E e) public returns (int) {
		return e.get_number();
	}

	function try_revert() public pure {
		revert();
	}

	function hash_tests() public pure {
		bytes32 hash1 = keccak256("Hello, World!");

		assert(hash1 == hex"acaf3289d7b601cbd114fb36c4d29c85bbfd5e133f14cb355c3fd8d99367964f");

		bytes32 hash2 = sha256("Hello, World!");

		assert(hash2 == hex"dffd6021bb2bd5b0af676290809ec3a53191dd81c7f70a4b28688a362182986f");

		bytes20 hash3 = ripemd160("Hello, World!");

		assert(hash3 == hex"527a6a4b9a6da75607546842e0e00105350b1aaf");
	}

	function test_events() public {
		emit L(102, "Hello from wasm", true);
	}

	function test_print(int64 arg1, string arg2) public {
		print("arg1:{} arg2:{}".format(arg1, arg2));
	}
}
