// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rpctransact.proto

package rpctransact

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	github_com_hyperledger_burrow_crypto "github.com/hyperledger/burrow/crypto"
	_ "github.com/hyperledger/burrow/execution/exec"
	_ "github.com/hyperledger/burrow/txs"
	github_com_hyperledger_burrow_txs "github.com/hyperledger/burrow/txs"
	payload "github.com/hyperledger/burrow/txs/payload"
	_ "google.golang.org/protobuf/types/known/durationpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CallCodeParam struct {
	FromAddress          github_com_hyperledger_burrow_crypto.Address `protobuf:"bytes,1,opt,name=FromAddress,proto3,customtype=github.com/hyperledger/burrow/crypto.Address" json:"FromAddress"`
	Code                 []byte                                       `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Data                 []byte                                       `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_unrecognized     []byte                                       `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *CallCodeParam) Reset()         { *m = CallCodeParam{} }
func (m *CallCodeParam) String() string { return proto.CompactTextString(m) }
func (*CallCodeParam) ProtoMessage()    {}
func (*CallCodeParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_039da6ebb58a8dc9, []int{0}
}
func (m *CallCodeParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallCodeParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CallCodeParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallCodeParam.Merge(m, src)
}
func (m *CallCodeParam) XXX_Size() int {
	return m.Size()
}
func (m *CallCodeParam) XXX_DiscardUnknown() {
	xxx_messageInfo_CallCodeParam.DiscardUnknown(m)
}

var xxx_messageInfo_CallCodeParam proto.InternalMessageInfo

func (m *CallCodeParam) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *CallCodeParam) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (*CallCodeParam) XXX_MessageName() string {
	return "rpctransact.CallCodeParam"
}

type TxEnvelope struct {
	Envelope             *github_com_hyperledger_burrow_txs.Envelope `protobuf:"bytes,1,opt,name=Envelope,proto3,customtype=github.com/hyperledger/burrow/txs.Envelope" json:"Envelope,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *TxEnvelope) Reset()         { *m = TxEnvelope{} }
func (m *TxEnvelope) String() string { return proto.CompactTextString(m) }
func (*TxEnvelope) ProtoMessage()    {}
func (*TxEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_039da6ebb58a8dc9, []int{1}
}
func (m *TxEnvelope) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TxEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxEnvelope.Merge(m, src)
}
func (m *TxEnvelope) XXX_Size() int {
	return m.Size()
}
func (m *TxEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_TxEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_TxEnvelope proto.InternalMessageInfo

func (*TxEnvelope) XXX_MessageName() string {
	return "rpctransact.TxEnvelope"
}

type TxEnvelopeParam struct {
	// An existing Envelope - either signed or unsigned - if the latter will be signed server-side
	Envelope *github_com_hyperledger_burrow_txs.Envelope `protobuf:"bytes,1,opt,name=Envelope,proto3,customtype=github.com/hyperledger/burrow/txs.Envelope" json:"Envelope,omitempty"`
	// If no Envelope provided then one will be generated from the provided payload and signed server-side
	Payload *payload.Any `protobuf:"bytes,2,opt,name=Payload,proto3" json:"Payload,omitempty"`
	// The amount of time to wait for the transaction to be committed and the TxExecution to be returned (server-side).
	// If zero there wait is unbounded. Timed out transactions return SyncInfo state that may be helpful debugging
	// non-committed transactions - this timeout must be less than client timeout to see such information!
	Timeout              time.Duration `protobuf:"bytes,3,opt,name=Timeout,proto3,stdduration" json:"Timeout"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TxEnvelopeParam) Reset()         { *m = TxEnvelopeParam{} }
func (m *TxEnvelopeParam) String() string { return proto.CompactTextString(m) }
func (*TxEnvelopeParam) ProtoMessage()    {}
func (*TxEnvelopeParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_039da6ebb58a8dc9, []int{2}
}
func (m *TxEnvelopeParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxEnvelopeParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TxEnvelopeParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxEnvelopeParam.Merge(m, src)
}
func (m *TxEnvelopeParam) XXX_Size() int {
	return m.Size()
}
func (m *TxEnvelopeParam) XXX_DiscardUnknown() {
	xxx_messageInfo_TxEnvelopeParam.DiscardUnknown(m)
}

var xxx_messageInfo_TxEnvelopeParam proto.InternalMessageInfo

func (m *TxEnvelopeParam) GetPayload() *payload.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *TxEnvelopeParam) GetTimeout() time.Duration {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (*TxEnvelopeParam) XXX_MessageName() string {
	return "rpctransact.TxEnvelopeParam"
}
func init() {
	proto.RegisterType((*CallCodeParam)(nil), "rpctransact.CallCodeParam")
	golang_proto.RegisterType((*CallCodeParam)(nil), "rpctransact.CallCodeParam")
	proto.RegisterType((*TxEnvelope)(nil), "rpctransact.TxEnvelope")
	golang_proto.RegisterType((*TxEnvelope)(nil), "rpctransact.TxEnvelope")
	proto.RegisterType((*TxEnvelopeParam)(nil), "rpctransact.TxEnvelopeParam")
	golang_proto.RegisterType((*TxEnvelopeParam)(nil), "rpctransact.TxEnvelopeParam")
}

func init() { proto.RegisterFile("rpctransact.proto", fileDescriptor_039da6ebb58a8dc9) }
func init() { golang_proto.RegisterFile("rpctransact.proto", fileDescriptor_039da6ebb58a8dc9) }

var fileDescriptor_039da6ebb58a8dc9 = []byte{
	// 557 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0x7e, 0xfd, 0x02, 0xfd, 0x18, 0x37, 0x0a, 0x5d, 0x21, 0x11, 0x22, 0xe4, 0xa0, 0x1c, 0x10,
	0x42, 0x65, 0x1d, 0x85, 0x1e, 0xf9, 0x50, 0xdc, 0x0f, 0x6e, 0xa8, 0x72, 0x2c, 0x24, 0xb8, 0x6d,
	0xec, 0xc5, 0xb5, 0x64, 0x7b, 0xad, 0xf5, 0x1a, 0x9c, 0x5f, 0xc1, 0x85, 0x03, 0x3f, 0x87, 0x63,
	0x8e, 0x48, 0x5c, 0x50, 0x0f, 0x01, 0xa5, 0x7f, 0x04, 0xad, 0xd7, 0x2e, 0x76, 0xd2, 0xb4, 0x5c,
	0xb8, 0x8d, 0x9f, 0xf1, 0xf3, 0xcc, 0x3c, 0x33, 0xb3, 0xb0, 0xcb, 0x13, 0x57, 0x70, 0x12, 0xa7,
	0xc4, 0x15, 0x38, 0xe1, 0x4c, 0x30, 0xa4, 0xd7, 0xa0, 0xee, 0x1d, 0x9f, 0xf9, 0xac, 0xc0, 0x4d,
	0x19, 0xa9, 0x5f, 0xba, 0x86, 0xcf, 0x98, 0x1f, 0x52, 0xb3, 0xf8, 0x9a, 0x64, 0xef, 0x4d, 0x2f,
	0xe3, 0x44, 0x04, 0x2c, 0x2e, 0xf3, 0x40, 0x73, 0xea, 0x96, 0x71, 0x2b, 0x21, 0xd3, 0x90, 0x11,
	0xaf, 0xfc, 0xdc, 0x16, 0x79, 0xaa, 0xc2, 0xfe, 0x27, 0x0d, 0x5a, 0x07, 0x24, 0x0c, 0x0f, 0x98,
	0x47, 0x4f, 0x08, 0x27, 0x11, 0x7a, 0x03, 0xfa, 0x31, 0x67, 0xd1, 0xc8, 0xf3, 0x38, 0x4d, 0xd3,
	0x8e, 0xf6, 0x40, 0x7b, 0xb4, 0x63, 0xed, 0xcf, 0xe6, 0xbd, 0xff, 0xce, 0xe6, 0xbd, 0x3d, 0x3f,
	0x10, 0xa7, 0xd9, 0x04, 0xbb, 0x2c, 0x32, 0x4f, 0xa7, 0x09, 0xe5, 0x21, 0xf5, 0x7c, 0xca, 0xcd,
	0x49, 0xc6, 0x39, 0xfb, 0x68, 0xba, 0x7c, 0x9a, 0x08, 0x86, 0x4b, 0xae, 0x5d, 0x17, 0x42, 0x08,
	0x6e, 0xca, 0x22, 0x9d, 0xff, 0xa5, 0xa0, 0x5d, 0xc4, 0x12, 0x3b, 0x24, 0x82, 0x74, 0x6e, 0x28,
	0x4c, 0xc6, 0x7d, 0x1f, 0xc0, 0xc9, 0x8f, 0xe2, 0x0f, 0x34, 0x64, 0x09, 0x45, 0x6f, 0x61, 0xab,
	0x8a, 0x8b, 0x56, 0xf4, 0x61, 0x0b, 0xcb, 0xee, 0x2b, 0xd0, 0xc2, 0x67, 0xf3, 0xde, 0xe3, 0xab,
	0xbb, 0xaa, 0xff, 0x6f, 0x5f, 0xc8, 0xf5, 0xbf, 0x6b, 0xd0, 0xfe, 0x53, 0x49, 0x99, 0xff, 0x77,
	0xe5, 0xd0, 0x43, 0xd8, 0x3c, 0x51, 0x5b, 0x28, 0x46, 0xa0, 0x0f, 0x77, 0x70, 0xb5, 0x95, 0x51,
	0x3c, 0xb5, 0xab, 0x24, 0x7a, 0x0e, 0x9b, 0x4e, 0x10, 0x51, 0x96, 0x89, 0x62, 0x2c, 0xfa, 0xf0,
	0x1e, 0x56, 0x9b, 0xc6, 0xd5, 0xa6, 0xf1, 0x61, 0xb9, 0x69, 0x6b, 0x4b, 0xae, 0xe5, 0xcb, 0xcf,
	0x9e, 0x66, 0x57, 0x9c, 0xe1, 0xe7, 0x5b, 0xb0, 0xe5, 0x94, 0x97, 0x83, 0x2c, 0x68, 0x5b, 0x9c,
	0x11, 0xcf, 0x25, 0xa9, 0x70, 0xf2, 0xf1, 0x34, 0x76, 0xd1, 0x7d, 0x5c, 0xbf, 0xb6, 0x25, 0xff,
	0xdd, 0x5d, 0x5c, 0x5c, 0x8d, 0x93, 0x1f, 0xe5, 0xd4, 0xcd, 0x64, 0x0d, 0xf4, 0x02, 0x6e, 0xd7,
	0x34, 0x46, 0xe9, 0xf5, 0x22, 0x3b, 0xc5, 0xc8, 0x6c, 0xea, 0xd2, 0x20, 0x11, 0xe8, 0x25, 0x6c,
	0x8c, 0x03, 0x3f, 0x76, 0xf2, 0x6b, 0x58, 0x77, 0xd7, 0x64, 0xd1, 0x3e, 0xe8, 0xc7, 0x8c, 0x47,
	0x59, 0x48, 0x04, 0x75, 0x72, 0xd4, 0x18, 0xdb, 0x7a, 0xd6, 0x00, 0x40, 0xde, 0x75, 0xe9, 0xba,
	0x7d, 0x41, 0x52, 0xe0, 0x65, 0x46, 0xf7, 0x40, 0x57, 0x49, 0xe5, 0x71, 0x85, 0xd2, 0xb4, 0x65,
	0xc2, 0x76, 0xa9, 0x1f, 0x44, 0x7f, 0x25, 0xff, 0x4c, 0xc9, 0xcb, 0xbb, 0x97, 0x94, 0x6e, 0xa3,
	0xf1, 0xc6, 0x13, 0xbc, 0x8c, 0x3d, 0x00, 0x18, 0xd3, 0xd8, 0x5b, 0xb1, 0xa3, 0xc0, 0x35, 0x76,
	0x54, 0x72, 0xd9, 0x4e, 0x49, 0x69, 0xda, 0x19, 0x00, 0xbc, 0x26, 0x11, 0x5d, 0xd1, 0x57, 0xe0,
	0x1a, 0x7d, 0x95, 0x5c, 0xd6, 0x2f, 0x29, 0x0d, 0x7d, 0xeb, 0xd5, 0x6c, 0x61, 0x68, 0xdf, 0x16,
	0x86, 0xf6, 0x63, 0x61, 0x68, 0xbf, 0x16, 0x86, 0xf6, 0xf5, 0xdc, 0xd0, 0x66, 0xe7, 0x86, 0xf6,
	0xee, 0xc9, 0xd5, 0xaf, 0x89, 0x27, 0xae, 0x59, 0x9b, 0xd4, 0x64, 0xa3, 0x78, 0x05, 0x4f, 0x7f,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x69, 0x8d, 0x35, 0xa5, 0x35, 0x05, 0x00, 0x00,
}

func (m *CallCodeParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallCodeParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallCodeParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRpctransact(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintRpctransact(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.FromAddress.Size()
		i -= size
		if _, err := m.FromAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRpctransact(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TxEnvelope) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxEnvelope) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxEnvelope) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Envelope != nil {
		{
			size := m.Envelope.Size()
			i -= size
			if _, err := m.Envelope.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintRpctransact(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxEnvelopeParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxEnvelopeParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxEnvelopeParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Timeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Timeout):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintRpctransact(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	if m.Payload != nil {
		{
			size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRpctransact(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Envelope != nil {
		{
			size := m.Envelope.Size()
			i -= size
			if _, err := m.Envelope.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintRpctransact(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRpctransact(dAtA []byte, offset int, v uint64) int {
	offset -= sovRpctransact(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CallCodeParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FromAddress.Size()
	n += 1 + l + sovRpctransact(uint64(l))
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovRpctransact(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRpctransact(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TxEnvelope) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Envelope != nil {
		l = m.Envelope.Size()
		n += 1 + l + sovRpctransact(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TxEnvelopeParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Envelope != nil {
		l = m.Envelope.Size()
		n += 1 + l + sovRpctransact(uint64(l))
	}
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovRpctransact(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Timeout)
	n += 1 + l + sovRpctransact(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRpctransact(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRpctransact(x uint64) (n int) {
	return sovRpctransact(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CallCodeParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpctransact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallCodeParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallCodeParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpctransact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpctransact
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRpctransact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FromAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpctransact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpctransact
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRpctransact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = append(m.Code[:0], dAtA[iNdEx:postIndex]...)
			if m.Code == nil {
				m.Code = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpctransact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpctransact
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRpctransact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpctransact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpctransact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxEnvelope) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpctransact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxEnvelope: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxEnvelope: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Envelope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpctransact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpctransact
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpctransact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Envelope == nil {
				m.Envelope = &github_com_hyperledger_burrow_txs.Envelope{}
			}
			if err := m.Envelope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpctransact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpctransact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxEnvelopeParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpctransact
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxEnvelopeParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxEnvelopeParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Envelope", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpctransact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpctransact
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpctransact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Envelope == nil {
				m.Envelope = &github_com_hyperledger_burrow_txs.Envelope{}
			}
			if err := m.Envelope.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpctransact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpctransact
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpctransact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &payload.Any{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpctransact
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpctransact
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRpctransact
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Timeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpctransact(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRpctransact
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpctransact(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpctransact
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpctransact
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpctransact
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRpctransact
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRpctransact
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRpctransact
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRpctransact        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpctransact          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRpctransact = fmt.Errorf("proto: unexpected end of group")
)
